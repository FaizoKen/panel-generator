{
  "version": 3,
  "sources": ["../../@uiw/codemirror-themes/src/index.tsx", "../../@uiw/codemirror-theme-github/src/index.ts"],
  "sourcesContent": ["import { EditorView } from '@codemirror/view';\nimport { Extension } from '@codemirror/state';\nimport { HighlightStyle, TagStyle, syntaxHighlighting } from '@codemirror/language';\nimport { StyleSpec } from 'style-mod';\n\nexport interface CreateThemeOptions {\n  /**\n   * Theme inheritance. Determines which styles CodeMirror will apply by default.\n   */\n  theme: Theme;\n  /**\n   * Settings to customize the look of the editor, like background, gutter, selection and others.\n   */\n  settings: Settings;\n  /** Syntax highlighting styles. */\n  styles: TagStyle[];\n}\n\ntype Theme = 'light' | 'dark';\n\nexport interface Settings {\n  /** Editor background. */\n  background?: string;\n  /** Default text color. */\n  foreground?: string;\n  /** Caret color. */\n  caret?: string;\n  /** Selection background. */\n  selection?: string;\n  /** Selection match background. */\n  selectionMatch?: string;\n  /** Background of highlighted lines. */\n  lineHighlight?: string;\n  /** Gutter background. */\n  gutterBackground?: string;\n  /** Text color inside gutter. */\n  gutterForeground?: string;\n  /** Text active color inside gutter. */\n  gutterActiveForeground?: string;\n  /** Gutter right border color. */\n  gutterBorder?: string;\n  /** set editor font */\n  fontFamily?: string;\n}\n\nexport const createTheme = ({ theme, settings = {}, styles = [] }: CreateThemeOptions): Extension => {\n  const themeOptions: Record<string, StyleSpec> = {\n    '.cm-gutters': {},\n  };\n  const baseStyle: StyleSpec = {};\n  if (settings.background) {\n    baseStyle.backgroundColor = settings.background;\n  }\n  if (settings.foreground) {\n    baseStyle.color = settings.foreground;\n  }\n  if (settings.background || settings.foreground) {\n    themeOptions['&'] = baseStyle;\n  }\n\n  if (settings.fontFamily) {\n    themeOptions['&.cm-editor .cm-scroller'] = {\n      fontFamily: settings.fontFamily,\n    };\n  }\n  if (settings.gutterBackground) {\n    themeOptions['.cm-gutters'].backgroundColor = settings.gutterBackground;\n  }\n  if (settings.gutterForeground) {\n    themeOptions['.cm-gutters'].color = settings.gutterForeground;\n  }\n  if (settings.gutterBorder) {\n    themeOptions['.cm-gutters'].borderRightColor = settings.gutterBorder;\n  }\n\n  if (settings.caret) {\n    themeOptions['.cm-content'] = {\n      caretColor: settings.caret,\n    };\n    themeOptions['.cm-cursor, .cm-dropCursor'] = {\n      borderLeftColor: settings.caret,\n    };\n  }\n  let activeLineGutterStyle: StyleSpec = {};\n  if (settings.gutterActiveForeground) {\n    activeLineGutterStyle.color = settings.gutterActiveForeground;\n  }\n  if (settings.lineHighlight) {\n    themeOptions['.cm-activeLine'] = {\n      backgroundColor: settings.lineHighlight,\n    };\n    activeLineGutterStyle.backgroundColor = settings.lineHighlight;\n  }\n  themeOptions['.cm-activeLineGutter'] = activeLineGutterStyle;\n\n  if (settings.selection) {\n    themeOptions[\n      '&.cm-focused .cm-selectionBackground, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection'\n    ] = {\n      backgroundColor: settings.selection,\n    };\n  }\n  if (settings.selectionMatch) {\n    themeOptions['& .cm-selectionMatch'] = {\n      backgroundColor: settings.selectionMatch,\n    };\n  }\n  const themeExtension = EditorView.theme(themeOptions, {\n    dark: theme === 'dark',\n  });\n\n  const highlightStyle = HighlightStyle.define(styles);\n  const extension = [themeExtension, syntaxHighlighting(highlightStyle)];\n\n  return extension;\n};\n\nexport default createTheme;\n", "/**\n * @name github\n */\nimport { tags as t } from '@lezer/highlight';\nimport { createTheme, CreateThemeOptions } from '@uiw/codemirror-themes';\n\nexport const defaultSettingsGithubLight: CreateThemeOptions['settings'] = {\n  background: '#fff',\n  foreground: '#24292e',\n  selection: '#BBDFFF',\n  selectionMatch: '#BBDFFF',\n  gutterBackground: '#fff',\n  gutterForeground: '#6e7781',\n};\n\nexport const githubLightInit = (options?: Partial<CreateThemeOptions>) => {\n  const { theme = 'light', settings = {}, styles = [] } = options || {};\n  return createTheme({\n    theme: theme,\n    settings: {\n      ...defaultSettingsGithubLight,\n      ...settings,\n    },\n    styles: [\n      { tag: [t.standard(t.tagName), t.tagName], color: '#116329' },\n      { tag: [t.comment, t.bracket], color: '#6a737d' },\n      { tag: [t.className, t.propertyName], color: '#6f42c1' },\n      { tag: [t.variableName, t.attributeName, t.number, t.operator], color: '#005cc5' },\n      { tag: [t.keyword, t.typeName, t.typeOperator, t.typeName], color: '#d73a49' },\n      { tag: [t.string, t.meta, t.regexp], color: '#032f62' },\n      { tag: [t.name, t.quote], color: '#22863a' },\n      { tag: [t.heading], color: '#24292e', fontWeight: 'bold' },\n      { tag: [t.emphasis], color: '#24292e', fontStyle: 'italic' },\n      { tag: [t.deleted], color: '#b31d28', backgroundColor: 'ffeef0' },\n      { tag: [t.atom, t.bool, t.special(t.variableName)], color: '#e36209' },\n      { tag: [t.url, t.escape, t.regexp, t.link], color: '#032f62' },\n      { tag: t.link, textDecoration: 'underline' },\n      { tag: t.strikethrough, textDecoration: 'line-through' },\n      { tag: t.invalid, color: '#cb2431' },\n      ...styles,\n    ],\n  });\n};\n\nexport const githubLight = githubLightInit();\n\nexport const defaultSettingsGithubDark: CreateThemeOptions['settings'] = {\n  background: '#0d1117',\n  foreground: '#c9d1d9',\n  caret: '#c9d1d9',\n  selection: '#003d73',\n  selectionMatch: '#003d73',\n  lineHighlight: '#36334280',\n};\n\nexport const githubDarkInit = (options?: Partial<CreateThemeOptions>) => {\n  const { theme = 'dark', settings = {}, styles = [] } = options || {};\n  return createTheme({\n    theme: theme,\n    settings: {\n      ...defaultSettingsGithubDark,\n      ...settings,\n    },\n    styles: [\n      { tag: [t.standard(t.tagName), t.tagName], color: '#7ee787' },\n      { tag: [t.comment, t.bracket], color: '#8b949e' },\n      { tag: [t.className, t.propertyName], color: '#d2a8ff' },\n      { tag: [t.variableName, t.attributeName, t.number, t.operator], color: '#79c0ff' },\n      { tag: [t.keyword, t.typeName, t.typeOperator, t.typeName], color: '#ff7b72' },\n      { tag: [t.string, t.meta, t.regexp], color: '#a5d6ff' },\n      { tag: [t.name, t.quote], color: '#7ee787' },\n      { tag: [t.heading], color: '#d2a8ff', fontWeight: 'bold' },\n      { tag: [t.emphasis], color: '#d2a8ff', fontStyle: 'italic' },\n      { tag: [t.deleted], color: '#ffdcd7', backgroundColor: 'ffeef0' },\n      { tag: [t.atom, t.bool, t.special(t.variableName)], color: '#ffab70' },\n      { tag: t.link, textDecoration: 'underline' },\n      { tag: t.strikethrough, textDecoration: 'line-through' },\n      { tag: t.invalid, color: '#f97583' },\n      ...styles,\n    ],\n  });\n};\n\nexport const githubDark = githubDarkInit();\n"],
  "mappings": "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",
  "names": ["createTheme", "_ref", "theme", "settings", "styles", "themeOptions", "baseStyle", "background", "backgroundColor", "foreground", "color", "fontFamily", "gutterBackground", "gutterForeground", "gutterBorder", "borderRightColor", "caret", "caretColor", "borderLeftColor", "activeLineGutterStyle", "gutterActiveForeground", "lineHighlight", "selection", "selectionMatch", "themeExtension", "EditorView", "dark", "highlightStyle", "HighlightStyle", "define", "extension", "syntaxHighlighting", "defaultSettingsGithubLight", "background", "foreground", "selection", "selectionMatch", "gutterBackground", "gutterForeground", "githubLightInit", "options", "theme", "settings", "styles", "createTheme", "_extends", "tag", "t", "standard", "tagName", "color", "comment", "bracket", "className", "propertyName", "variableName", "attributeName", "number", "operator", "keyword", "typeName", "typeOperator", "string", "meta", "regexp", "name", "quote", "heading", "fontWeight", "emphasis", "fontStyle", "deleted", "backgroundColor", "atom", "bool", "special", "url", "escape", "link", "textDecoration", "strikethrough", "invalid", "githubLight", "defaultSettingsGithubDark", "caret", "lineHighlight", "githubDarkInit", "githubDark"]
}
